{
	"info": {
		"_postman_id": "6b5a97c0-9767-4a94-8707-6b8239bcc4f8",
		"name": "Gorest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29681095"
	},
	"item": [
		{
			"name": "Add user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201(test)\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Body matches string(validate id key is present in body)\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"});",
							"var idValue = pm.response.json().id;",
							"pm.environment.set('id', idValue);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\":\"{{name}}\",\n    \"gender\":\"{{gender}}\",\n    \"email\":\"{{email}}\",\n    \"status\":\"{{status}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base}}public/v2/users",
					"host": [
						"{{base}}public"
					],
					"path": [
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "search user by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist;",
							"    pm.expect(responseData.name).to.exist;",
							"    pm.expect(responseData.email).to.exist;",
							"    pm.expect(responseData.gender).to.exist;",
							"    pm.expect(responseData.status).to.exist;",
							"});",
							"",
							"",
							"",
							"",
							"pm.test(\"Gender should be either 'male' or 'female'\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.gender).to.be.oneOf(['male', 'female'], \"Gender should be either 'male' or 'female'\");",
							"});",
							"",
							"",
							"pm.test(\"Status is one of the allowed values\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.status).to.be.oneOf([\"active\", \"inactive\", \"pending\"]);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base}}public/v2/users/{{id}}",
					"host": [
						"{{base}}public"
					],
					"path": [
						"v2",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}